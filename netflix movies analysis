{"metadata":{"colab":{"name":"Welcome to DataCamp Workspaces.ipynb","provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"editor":"DataLab","kaggle":{"accelerator":"none","dataSources":[{"sourceId":8985563,"sourceType":"datasetVersion","datasetId":5411481}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":5,"nbformat":4,"cells":[{"cell_type":"markdown","source":"**Netflix**! What started in 1997 as a DVD rental service has since exploded into one of the largest entertainment and media companies.\n\nGiven the large number of movies and series available on the platform, it is a perfect opportunity to flex your exploratory data analysis skills and dive into the entertainment industry.\n\nYou work for a production company that specializes in nostalgic styles. You want to do some research on movies released in the 1990's. You'll delve into Netflix data and perform exploratory data analysis to better understand this awesome movie decade!\n\nYou have been supplied with the dataset `netflix_data.csv`, along with the following table detailing the column names and descriptions. Feel free to experiment further after submitting!\n\n## The data\n### **netflix_data.csv**\n| Column | Description |\n|--------|-------------|\n| `show_id` | The ID of the show |\n| `type` | Type of show |\n| `title` | Title of the show |\n| `director` | Director of the show |\n| `cast` | Cast of the show |\n| `country` | Country of origin |\n| `date_added` | Date added to Netflix |\n| `release_year` | Year of Netflix release |\n| `duration` | Duration of the show in minutes |\n| `description` | Description of the show |\n| `genre` | Show genre |","metadata":{}},{"cell_type":"code","source":"# Importing pandas and matplotlib\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Read in the Netflix CSV as a DataFrame\nnetflix_df = pd.read_csv(\"/kaggle/input/netlix-data/netflix_data.csv\")","metadata":{"executionTime":34,"lastSuccessfullyExecutedCode":"# Importing pandas and matplotlib\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Read in the Netflix CSV as a DataFrame\nnetflix_df = pd.read_csv(\"netflix_data.csv\")","executionCancelledAt":null,"lastExecutedAt":1721299998959,"lastExecutedByKernel":"d7f3baee-e437-4f6d-9955-d11465f15db1","lastScheduledRunId":null,"execution":{"iopub.status.busy":"2024-07-18T16:45:10.590293Z","iopub.execute_input":"2024-07-18T16:45:10.590733Z","iopub.status.idle":"2024-07-18T16:45:12.085255Z","shell.execute_reply.started":"2024-07-18T16:45:10.590694Z","shell.execute_reply":"2024-07-18T16:45:12.083650Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":"#introduction\nhere , we are finding the answers to the following questions:\nWhat was the most frequent movie duration in the 1990s? Save an approximate answer as an integer called duration.\n\nA movie is considered short if it is less than 90 minutes. Count the number of short action movies released in the 1990s and save this integer as short_movie_count.","metadata":{"executionCancelledAt":null,"executionTime":46,"lastExecutedAt":1721299999005,"lastExecutedByKernel":"d7f3baee-e437-4f6d-9955-d11465f15db1","lastScheduledRunId":null,"lastSuccessfullyExecutedCode":"# Start coding here! Use as many cells as you like"}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n# Assuming 'duration' is a column name, it should be passed as a string\ntime = netflix_df[['duration','release_year']]\n# Assuming 'time' is your DataFrame and 'release_year' is a column\nnineties = time[(time['release_year'] >= 1990) & (time['release_year'] <= 1999)]\nduration_array = nineties['duration'].to_numpy()\n\nplt.hist(duration_array,bins = 50)\nvalue = stats.mode(duration_array)\nprint(value)\n\nduration = 94\n\n","metadata":{"executionCancelledAt":null,"executionTime":52,"lastExecutedAt":1721299999058,"lastExecutedByKernel":"d7f3baee-e437-4f6d-9955-d11465f15db1","lastScheduledRunId":null,"lastSuccessfullyExecutedCode":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n# Assuming 'duration' is a column name, it should be passed as a string\ntime = netflix_df[['duration','release_year']]\n# Assuming 'time' is your DataFrame and 'release_year' is a column\nnineties = time[(time['release_year'] >= 1990) & (time['release_year'] <= 1999)]\nduration_array = nineties['duration'].to_numpy()\n\n\nvalue = stats.mode(duration_array)\nprint(value)\n\nduration = 94\n\n","outputsMetadata":{"0":{"height":38,"type":"stream"}},"execution":{"iopub.status.busy":"2024-07-18T16:47:46.654393Z","iopub.execute_input":"2024-07-18T16:47:46.654898Z","iopub.status.idle":"2024-07-18T16:47:47.067363Z","shell.execute_reply.started":"2024-07-18T16:47:46.654847Z","shell.execute_reply":"2024-07-18T16:47:47.065755Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"ModeResult(mode=94, count=7)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"most frequent duration of the movies in the 1990s is 94 minutes which occurs in 7 movies","metadata":{}},{"cell_type":"code","source":"\ndata = netflix_df[['duration','release_year','genre']]\n\nninty = data[(data['release_year'] >= 1990) & (data['release_year'] <= 1999) & (data['duration'] <90) & (data['genre'] == 'Action')]\n\nshort = ninty.shape[0]\n\nprint(short)\n\n\nshort_movie_count = 7","metadata":{"executionCancelledAt":null,"executionTime":53,"lastExecutedAt":1721299999111,"lastExecutedByKernel":"d7f3baee-e437-4f6d-9955-d11465f15db1","lastScheduledRunId":null,"lastSuccessfullyExecutedCode":"netflix_df = pd.read_csv(\"netflix_data.csv\")\n\n\ndata = netflix_df[['duration','release_year','genre']]\n\nninty = data[(data['release_year'] >= 1990) & (data['release_year'] <= 1999) & (data['duration'] <90) & (data['genre'] == 'Action')]\n\nshort = ninty.shape[0]\n\nprint(short)\n\n\nshort_movie_count = 7","outputsMetadata":{"0":{"height":38,"type":"stream"}},"execution":{"iopub.status.busy":"2024-07-18T16:45:37.597512Z","iopub.execute_input":"2024-07-18T16:45:37.597958Z","iopub.status.idle":"2024-07-18T16:45:37.613519Z","shell.execute_reply.started":"2024-07-18T16:45:37.597923Z","shell.execute_reply":"2024-07-18T16:45:37.612156Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"7\n","output_type":"stream"}]},{"cell_type":"markdown","source":"the number of short action movies that got released in 1990s is 7.","metadata":{}}]}